# -*- coding: utf-8 -*-
"""numpy_introduction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_LL4cVgLM-Ib4u7KblaOann1g1tjn-ub
"""

11  2 import numpy as np

"""## 1. **Data** types and Attributes """

#numpy's main dataype is nd array
a1=np.array([1,2,3])
a1

type(a1)

a2 = np.array([ [1,2.0,3.3],
                [4,5,6.5] ])
a3 = np.array([[[1,2,3],
                [4,5,6],
                [7,8,9]],
               [[10,11,12],
                [13,14,15],
                [16,17,18] ]])

a2

a3

a1.shape,a2.shape,a3.shape

a1.ndim,a2.ndim,a3.ndim #view dimensions of nd array

a1.dtype, a2.dtype, a3.dtype

a1.size, a2.size, a3.size

# Create a Dataframe from a Numpy array
import pandas as pd

df = pd.DataFrame(a2)
df

"""# 2. **Creating Numpy Arrays**"""

sample_array= np.array([1,2,3])
sample_array

ones = np.ones((2,3))
ones

ones.dtype

zeros = np.zeros((2,3))
zeros

zeros.dtype

range_array = np.arange(0,10,2)
range_array

type(range_array)

random_array = np.random.randint(0,10,size=(3,5))
random_array

np.random.random((5,3))

random_array_2 = np.random.rand(5,3)
random_array_2

#Pseudo-random numbers not really random numbers 
np.random.seed()

"""# **3. Numpy random arrays**"""

random_array_3 = np.random.randint(10,size=(5,3))
random_array_3

"""# **4. Viewing arrays and matrices**"""

np.unique(random_array_3)

a1[0],a2[0]

a3[0]

a3[:2,:2,:2]

a4 = np.random.randint(10,size=(2,3,4,5))
a4

a4.shape,a4.ndim

#Get the first 4 numbers of the inner array
a4[:,:,:2,:3]

"""# **5. Manipulating arrays**"""

#Arithmetic
a1 + ones

a1 - ones

a1 * ones

a1,a2

a1 * a2

a3 
# a2 cannot be multiplied with a3 
# since a2 cannot be broadcasted on a3 
#in order to be compatible they either have to have the same shape or one array be 1

a1 / ones

a2 / a1

#floor division removes decimals (rounds down)
a2 // a1

np.square(a2)

a1 % 2

a2 % 2

np.exp(a1)

np.log(a1)

"""# **6. Manipulating arrays 2**

-Aggregation
"""

# aggregation = performing the same operation on a number of things
listy_list = [1,2,3]
type(listy_list)

sum(listy_list)

np.sum(a1),type(a1)

# use python methods on python data types(sum)
# use numpy methods on numpy arrays(np.sum)

# Create a massivw numpy array
massive_array = np.random.random(100000)
massive_array.size

massive_array[:10]

# Commented out IPython magic to ensure Python compatibility.
# %timeit sum(massive_array) # view python's sum
# %timeit np.sum(massive_array)# view Numpy's np.sum

np.mean(a2)

np.max(a2)

np.mean(a2)

np.std(a2) #standard deviation = a measure of how spread out a group of numbers
#is from the mean

np.var(a2) # variance = measure of the average degree to which each number is 
# different from the mean
#Higher variance = wider range of numbers
#Lower variance = lower range of numbers

#Standard deviation = square root of variance
np.sqrt(np.var(a2))

"""# **7.Standard deviation and variance**"""

high_var_array = np.array([1,100,200,300,4000,5000])
low_var_array = np.array([2,4,6,8,10])

np.var(high_var_array),np.var(low_var_array)

np.std(high_var_array),np.std(low_var_array)

np.mean(high_var_array),np.mean(low_var_array)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
plt.hist(high_var_array)
plt.show()

plt.hist(low_var_array)
plt.show()

"""# **8. Reshape and Transpose**"""

a2,a2.shape

a3,a3.shape

#Reshaping in order to be able to do a2 * 3
a2.reshape(2,3,1).shape

a2_reshape = a2.reshape(2,3,1)

a2_reshape * a3

#Transpose = switches the axis a2 before had a shape of (2,3) after transpose it has (3,2)
a2.T,a2.T.shape

"""#  9.Dot product VS Element Wise"""

np.random.seed(0)

mat1 = np.random.randint(10,size=(5,3))
mat2 = np.random.randint(10,size=(5,3))

mat1,mat2

#Elements wise multiplication
mat1 * mat2

#Dot product
mat3 = np.dot(mat1,mat2.T)
mat3,mat3.shape

"""# **10. Dot product example**"""

np.random.seed(0)
#Number of jars sold
sales_amounts = np.random.randint(20,size=(5,3))
sales_amounts

#Create weekly sales Data frame
weekly_sales =pd.DataFrame(sales_amounts,index=['Mon','Tues','Wed','Thurs','Fri'],
                           columns=['Almond Butter','Peanut Butter','Cashew butter'])
weekly_sales

#Create a price array
prices =np.array([10,8,12])
prices

#Create butter prices DataFrame
butter_prices = pd.DataFrame(prices.reshape(1,3),
                             index=['Price'],
                             columns=['Almond Butter','Peanut Butter','Cashew Butter'])
butter_prices

#Shapes aren't aligned let's transpose
total_sales = prices.dot(sales_amounts.T)
total_sales

# Create daily_sales
butter_prices.shape,weekly_sales.shape

weekly_sales,butter_prices

daily_sales=prices.reshape(1,3).dot(weekly_sales.T)
daily_sales

daily_sale = pd.DataFrame(daily_sales,
                          index=['Price'],
                          columns=['Mon','Tues','Wed','Thurs','Fri'])
daily_sale

weekly_sales,daily_sale

#Need to reshape in order to work
weekly_sales['Total ($)']= daily_sale.T
weekly_sales

"""# **11. Comparison Operators**"""

a1 ,a2

a1 > a2

a2 > a1

bool_array = a1 >= a2
bool_array

bool_array.dtype,type(bool_array)

"""# **12.Sorting arrays**"""

random_array

sorted_array = np.sort(random_array)
sorted_array

np.argsort(random_array) #shows indexses sorted

np.argmin(random_array)#shows index of minimum number

np.argmax(random_array,axis =0) # shows index of max number

np.argmax(random_array,axis=1)

"""# **13. Practical examples**"""

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive"

!ls "/content/drive/My Drive/machine_learning/images" 
path =!ls "/content/drive/My Drive/machine_learning/images"

#Import image
from IPython.display import Image
Image('numpy-panda.png')

#Turn an image into a numpy array
from matplotlib.image import imread

panda = imread("/content/drive/My Drive/machine_learning/images/numpy-panda.png" )

type(panda)

panda.size,panda.shape,panda.ndim

panda[:5]

Image("/content/drive/My Drive/machine_learning/images/numpy-car-photo.png")

car_photo = imread("/content/drive/My Drive/machine_learning/images/numpy-car-photo.png")

car_photo[:3]

type(car_photo)

