# -*- coding: utf-8 -*-
"""Matplotlib_intro

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10V4AC7hXdlikFNkECm44jrQbLltTHVcT

# **1.Introduction to Matplotlib**
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

a1 = pd.Series([1,2,3,4])
a1

plt.plot(a1)

plt.plot(); # we use semicolon in order to not get empty brackets or the position
#of the plot se can also use plt.show()

plt.plot([1,2,3,4]);

x=[1,2,3,4]
y=[11,22,33,44]
plt.plot(x,y);

#There are 2 methods to plotting the pyplot and the object oriented 
#It is better to use the oo method since its more flexible

#1st method
fig = plt.figure() 
ax = fig.add_subplot()
plt.show()

#2nd method
fig = plt.figure()
ax = fig.add_axes([1,1,1,1])
ax.plot(x,y)
plt.show()

#3rd method(recommended)
fig ,ax = plt.subplots()
ax.plot(x,[50,100,200,250]);
type(fig),type(ax)

"""# **2.Anatomy of Matplotlib**"""

#Matplotlib example workflow
#Step 0 is importing matplot lib(already done)

#1.Prepare data
x = [1,2,3,4]
y = [11,22,33,44]

#2.Setup plot
fix ,ax = plt.subplots(figsize=(10,10)) #(Width,Height)

#3.Plot data
ax.plot(x,y)

#4.Customize plot
ax.set(title="Simple plot",
       xlabel="x-axis",
       ylabel="y-axis")

#5.Save and show the whole figure
fig.savefig('/content/drive/MyDrive/machine_learning/images/sample-plot.png')

"""# **3.Scatter and bar plot**"""

#Create some data
x = np.linspace(0,10,100)
x[:10]

#Plot the data and create a plot
fig ,ax = plt.subplots()
ax.plot(x,x**2);

#Use the same data in order to create a scatter plot
fig , ax = plt.subplots()
ax.scatter(x,np.exp(x));

#Another scatter plot
fig ,ax = plt.subplots()
ax.scatter(x,np.sin(x));

#Make a plot from dictionary
nut_butter_prices ={"Almond butter":10,
                    "Peanut butter":8,
                    "Cashew butter":12 }
fix ,ax = plt.subplots()
ax.bar(nut_butter_prices.keys(),nut_butter_prices.values())
ax.set(title="Butter prices",
       ylabel="Price($)");

"""# **4.Histograms and Subplots**"""

fig,ax = plt.subplots()
ax.barh(list(nut_butter_prices.keys()),list(nut_butter_prices.values()));

#Histogram
x = np.random.randn(1000)
fig,ax = plt.subplots()
ax.hist(x);

#Two options for subplots

#Option 1
fig,((ax1,ax2),(ax3,ax4)) = plt.subplots(nrows=2,
                                         ncols=2,
                                         figsize=(10,5))
#Plot to each different axis
ax1.plot(x,x/2);
ax2.scatter(np.random.random(10),np.random.random(10));
ax3.bar(nut_butter_prices.keys(),nut_butter_prices.values());
ax4.hist(np.random.randn(1000));

#Subplots option 2 (list indexing)
fig,ax = plt.subplots(nrows=2,
                      ncols=2,
                      figsize=(10,5))
#Plot to each different index(axis)
ax[0,0].plot(x,x/2);
ax[0,1].scatter(np.random.random(10),np.random.random(10));
ax[1,0].bar(nut_butter_prices.keys(),nut_butter_prices.values());
ax[1,1].hist(np.random.randn(1000));

"""# **5.Plotting from Pandas DataFrames**"""

#Make a data frame
car_sales = pd.read_csv("/content/drive/MyDrive/machine_learning/data/car-sales.csv")
car_sales

ts = pd.Series(np.random.randn(1000),
               index = pd.date_range("1/1/2020",periods=1000))

ts = ts.cumsum()
ts.plot()

car_sales["Price"]= car_sales["Price"].str.replace('[\$\,\.]' ,"")
car_sales

#Remove last two zeros
car_sales["Price"] = car_sales["Price"].str[:-2]
car_sales

car_sales["Sale Date"] = pd.date_range("1/1/2020",periods=len(car_sales))
car_sales

#Reassing Price column from string to int
car_sales["Price"] = car_sales["Price"].astype(str).astype(int)
car_sales.dtypes

car_sales["Total Sales"] = car_sales["Price"].cumsum()
car_sales

#Lets plot the total sales
car_sales.plot(x="Sale Date",y="Total Sales");

car_sales.plot(x="Odometer (KM)",y="Price",kind="scatter");

x = np.random.rand(10,4)
x

df = pd.DataFrame(x,columns=["A","B","C","D"])
df

df.plot.bar();

df.plot(kind="bar")

car_sales

car_sales.plot(x="Make",y="Odometer (KM)",kind="bar");

# Histogram

car_sales["Odometer (KM)"].plot.hist();

car_sales["Odometer (KM)"].plot(kind="hist");

car_sales["Odometer (KM)"].plot.hist(bins=10);

#Tryin another data set
heart_disease = pd.read_csv("/content/drive/MyDrive/machine_learning/data/heart-disease.csv")
heart_disease

heart_disease.head()

#Create a histogram of age
heart_disease["age"].plot.hist();

#Not ideal plot for this data set
heart_disease.plot.hist(figsize=(10,30),
                        subplots=True);

"""#When to use each method
*   When plotting something quikly its ok to use pyplot method
*   But when plotting more advanced data its better to use Matplotlibs oo method


"""

over_50 = heart_disease[heart_disease["age"]>50]
over_50.head()

#Pyplot method
over_50.plot(kind="scatter",
             x="age",
             y="chol",
             c="target");

#oo method with pyplot
fig,ax = plt.subplots(figsize=(10,6))
over_50.plot(kind="scatter",
             x="age",
             y="chol",
             c="target",
             ax=ax);
# ax.set_xlim([45,100]); sets the limit of the x axis

fig ,ax = plt.subplots(figsize=(10,6))
#Plot the data
scatter = ax.scatter(heart_disease["age"],
                     heart_disease["thalach"],
                     c=heart_disease["target"])

#Customizing the plot
ax.set(title='Heart disease and max heart rate',
       xlabel='Age',
       ylabel='Thalach');
ax.legend(*scatter.legend_elements(),title="Targe");
#Add a .mean line
ax.axhline(heart_disease['thalach'].mean(),
           linestyle="--");

over_50.head()

#oo method from scratch correct way
fig , ax = plt.subplots(figsize=(10,6))
#Plot the data
scatter = ax.scatter(x=over_50["age"],
                     y=over_50["chol"],
                     c=over_50["target"]);
#Customize the plot
ax.set(title="Heart disease and cholesterol levers",
       xlabel="Age",
       ylabel="Cholesterol");
#Add a legend
ax.legend(*scatter.legend_elements(),title="Target");
#Add a horizontal line
ax.axhline(over_50["chol"].mean(),linestyle="--");

#Subplot of chol,age,thalach
fig , (ax0,ax1) = plt.subplots(nrows=2,
                               ncols=1,
                               figsize=(10,10),
                               sharex=True);
#Add data to ax0
scatter = ax0.scatter(x=over_50["age"],
                      y=over_50["chol"],
                      c=over_50["target"])
#Customize ax0
ax0.set(title="Cholesterol levels",
        xlabel="Age",
        ylabel="Cholesterol")
#Add a legend to ax0
ax0.legend(*scatter.legend_elements(),title="Target")
#Add a mean line
ax0.axhline(y=over_50["chol"].mean(),
            linestyle="--");

#Add data to ax1
scatter = ax1.scatter(x=over_50["age"],
                      y=over_50["thalach"],
                      c=over_50["target"])
#Customize ax1
ax1.set(title="Max heart rate",
        xlabel="Age",
        ylabel="Max heart rate")
#Add a legend to ax1
ax1.legend(*scatter.legend_elements(),title="Target")
#Add a mean line
ax1.axhline(y=over_50["thalach"].mean(),
            linestyle="--");
#Add a title to the whole figure
fig.suptitle("HEART DISEASE",fontsize=16,fontweight="bold");

"""# **6.Customizing plots**"""

#Plot styles available
plt.style.available

car_sales["Price"].plot();

plt.style.use('seaborn-whitegrid')
car_sales['Price'].plot();

car_sales.plot(x="Odometer (KM)",
               y="Price",
               kind="scatter");

#Create some data
x = np.random.rand(10,4)
df = pd.DataFrame(x,columns=["A","B","C","D"])
df

ax = df.plot(kind="bar")
type(ax)

#Customize our ax plot with the set method
ax = df.plot(kind="bar")
#Add some labels and a title
ax.set(title="Random Number Graph from DataFrame",
       xlabel='Row number',
       ylabel='Random number')
#Make the legend visible
ax.legend().set_visible(True)

#Set the style
plt.style.use('seaborn-whitegrid')

#OO method from scratch
fig ,ax = plt.subplots(figsize=(10,6))
#Plot the data
scatter = ax.scatter (x=over_50["age"],
                      y=over_50['chol'],
                      c=over_50['target'],
                      cmap='winter')# this changes the color scheme
#Customize the plot
ax.set(title='Cholesterol levels',
       xlabel='Age',
       ylabel='Cholesterol')

#Add a legend
ax.legend(*scatter.legend_elements(),title="Target")
#Add a horizontal line
ax.axhline(over_50['chol'].mean(),
           linestyle='--');

#Customizing the x and y axis limitations
#Subplot of chol,age,thalach
fig , (ax0,ax1) = plt.subplots(nrows=2,
                               ncols=1,
                               figsize=(10,10),
                               sharex=True);
#Add data to ax0
scatter = ax0.scatter(x=over_50['age'],
                      y=over_50["chol"],
                      c=over_50["target"],
                      cmap="winter")
#Customize ax0
ax0.set(title="Cholesterol levels",
        xlabel="Age",
        ylabel="Cholesterol")

#Change the x axis limits
ax0.set_xlim([50,80])


#Add a legend to ax0
ax0.legend(*scatter.legend_elements(),title="Target")
#Add a mean line
ax0.axhline(y=over_50["chol"].mean(),
            linestyle="--");

#Add data to ax1
scatter = ax1.scatter(x=over_50["age"],
                      y=over_50["thalach"],
                      c=over_50["target"],
                      cmap="winter")
#Customize ax1
ax1.set(title="Max heart rate",
        xlabel="Age",
        ylabel="Max heart rate")

#change ax1 x axis limits
ax1.set_xlim([50,80])
#change ax1 y axis limits
ax1.set_ylim([60,200])

#Add a legend to ax1
ax1.legend(*scatter.legend_elements(),title="Target")
#Add a mean line
ax1.axhline(y=over_50["thalach"].mean(),
            linestyle="--");
#Add a title to the whole figure
fig.suptitle("HEART DISEASE",fontsize=16,fontweight="bold");

#you can save your plots with either saving the image or with the:
# fig.savefig('/path/name_you_want_to_give.png')